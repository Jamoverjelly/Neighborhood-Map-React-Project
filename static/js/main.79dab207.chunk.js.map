{"version":3,"sources":["filterVenues.js","infoWindow.js","App.js","serviceWorker.js","index.js"],"names":["FilterVenues","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","query","setState","navListIsOpen","controlDisplayedVenues","toggleNavListDisplay","prevState","collectedFilteredVenues","collectedFilteredMarkers","bindToThis","assertThisInitialized","match","RegExp","escapeRegExp","venuesList","filter","venue","test","title","markers","marker","filteredVenues","filteredMarkers","map","setVisible","setTimeout","controlMarkerVisibility","state","filteredMarker","id","getSelectedVenueData","removeMarkerAnimation","addMarkerAnimation","getCurrentMarkerData","openInfoWindow","currentMarker","setAnimation","key","window","google","maps","Animation","BOUNCE","coffeeVenues","currentVenue","_this2","_this$state","react_default","a","createElement","className","onSubmit","event","preventDefault","onClick","aria-haspopup","aria-controls","type","role","aria-labelledby","placeholder","value","onChange","target","tabIndex","onKeyPress","Component","InfoWindow","photoContent","src","alt","streetAddress","municipalAddress","App","initMap","venues","Map","document","getElementById","center","lat","lng","zoom","_loop","i","position","Marker","animation","DROP","push","addListener","length","closeInfoWindow","infoWindowIsOpen","getVenuePhoto","photoUrl","concat","fetch","then","response","json","photoPrefix","photos","items","prefix","photoSuffix","suffix","photoSrc","catch","error","errorReport","body","querySelector","script","async","defer","insertAdjacentElement","onerror","write","runScript","filterVenues","infoWindow","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.79dab207.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport escapeRegExp from 'escape-string-regexp';\n\nimport * as coffeeVenues from './coffeeVenues.json';\n\nclass FilterVenues extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            filteredVenues: coffeeVenues.default,\n            filteredMarkers: [],\n            currentVenue: {},\n            navListIsOpen: true\n        }\n    }\n\n    componentDidMount() {\n        // Pass the current state of the markers array to our filteredMarkers state via props\n        this.setState({\n            filteredMarkers: this.props.markers\n        });\n    }\n\n    updateQuery = (query) => {\n        // Update the navigation visibility based on current query state\n        this.setState({\n            query,\n            navListIsOpen: true\n        });\n\n        // If query state is empty, close display of navigation list\n        if (query === '') {\n            this.setState({\n                navListIsOpen: false\n            });\n        }\n        this.controlDisplayedVenues(query);\n    }\n\n    toggleNavListDisplay = () => {\n        // update display of FilterVenues based on current state of navListIsOpen\n        this.setState((prevState) => ({\n            navListIsOpen: !(prevState.navListIsOpen)\n        }));\n    }\n\n    controlDisplayedVenues = (query) => {\n        // Provide custom object-context variable to access this scope\n        let bindToThis = this;\n        // Initialize mutable container variables for holding filtered list of markers and venues\n        let collectedFilteredVenues;\n        let collectedFilteredMarkers;\n\n        // When query is truthy (has a value), apply RegExp pattern escapeRegExp for filtering venues\n        if (query) {\n            const match = new RegExp(escapeRegExp(query), 'i');\n\n            // Add venue to the filtered array if its name matches the query\n            collectedFilteredVenues = this.props.venuesList.filter(venue =>\n                match.test(venue.title)\n            );\n\n            // Add marker to the filtered array if its title matches the query\n            collectedFilteredMarkers = this.props.markers.filter(marker =>\n                match.test(marker.title)\n            );\n            \n            // Update state with filtered venue and marker collections\n            this.setState({\n                filteredVenues: collectedFilteredVenues,\n                filteredMarkers: collectedFilteredMarkers\n            });\n        } else {\n            // When query is falsy, update venue and marker state with the default collections via props \n            this.setState({\n                filteredVenues: this.props.venuesList,\n                filteredMarkers: this.props.markers\n            });\n        }\n\n        // Update visibility of markers on map according to the filteredMarkers state\n        this.props.markers.map(marker => marker.setVisible(false));\n        \n        /* Delay on JS event loop is necessary for effectively controlling marker visibility\n        relative to user interactions */\n        setTimeout(function () {\n            bindToThis.props.markers.map(marker =>\n                bindToThis.controlMarkerVisibility(marker))\n        }, 0)\n    }\n    \n    controlMarkerVisibility = (marker) => {\n        // matching markers from filteredMarkers array should be visible\n        this.state.filteredMarkers.map(filteredMarker => {\n            if (filteredMarker.id === marker.id) {\n                marker.setVisible(true)\n            }\n        });\n    }\n\n    getSelectedVenueData = (venue) => {\n        // Provide custom object-context variable to access this scope\n        let bindToThis = this;\n\n        // Clear any existing animations from page\n        this.removeMarkerAnimation();\n        // Add brief animation to marker when corresponding list-item is clicked\n        this.addMarkerAnimation(venue);\n        setTimeout(function() {\n            bindToThis.removeMarkerAnimation();\n        }, 1000);\n\n        // Retrieve data for currently selected marker\n        this.getCurrentMarkerData(venue);\n\n        // Open corresponding InfoWindow for this marker\n        // Delay JS event loop before initiating call to openInfoWindow with current marker data\n        setTimeout(function () {\n            bindToThis.props.openInfoWindow(\n                bindToThis.state.currentMarker\n            );\n        }, 0)\n    }\n\n    removeMarkerAnimation = () => {\n        // Clear animation from all markers in filtered markers collection\n        this.state.filteredMarkers.map(marker =>\n            marker.setAnimation(null)\n        );\n    }\n\n    addMarkerAnimation = (venue) => {\n        // When filtered marker id matches venue's key, animate that marker\n        this.state.filteredMarkers.map(marker => {\n            if (marker.id === venue.key) {\n                marker.setAnimation(\n                    window.google.maps.Animation.BOUNCE\n                );\n            }\n        });\n    }\n\n    getCurrentMarkerData = (venue) => {\n        // Clicked markers should open InfoWindow with correct data\n        this.state.filteredMarkers.map(marker => {\n            if (marker.id === venue.key) {\n                this.setState({\n                    currentMarker: marker\n                })\n            }\n        });\n    }\n\n    render () {\n\n        const { query, filteredVenues, navListIsOpen } = this.state;\n\n        return (\n            <section className='nav-container'>                \n                <form\n                    className='nav-form'\n                    onSubmit={(event) => event.preventDefault()}\n                >                    \n                    <button\n                        className='nav-button'\n                        onClick={() => this.toggleNavListDisplay()}\n                        aria-haspopup='true'\n                        aria-controls='venues-list'\n                    >\n                        List\n                    </button>\n                    <input\n                        className='nav-input'\n                        type='text'\n                        role='searchbox'\n                        aria-labelledby='filter'\n                        placeholder='Filter Café Listing...'\n                        value={query}\n\t\t\t\t\t\tonChange={(event) => \n\t\t\t\t\t\t\tthis.updateQuery(event.target.value)}\n                    />                    \n                </form>\n\n                {\n                    navListIsOpen &&\n                    <ul\n                        className='venues-list'\n                        role='menu'\n                        aria-labelledby='menubutton'\n                    >\n                        {\n                            // Create list-item for each venue in filteredVenues collection\n                            filteredVenues.map(venue => (\n                                <li\n                                    className='venue-list-item'\n                                    tabIndex={0}\n                                    role='menuitem'\n                                    aria-labelledby={venue.title}\n                                    key={venue.key}\n                                    onClick={() => this.getSelectedVenueData(venue)}\n                                    onKeyPress={() => this.getSelectedVenueData(venue)}\n                                >\n                                    {venue.title}\n                                </li>\n                            ))\n                        }\n                    </ul>\n                }\n            </section>\n        );\n    }\n}\n\nexport default FilterVenues;","import React from 'react';\n\nfunction InfoWindow(props) {\n    const { currentMarker, photoContent } = props;\n\n    return (\n        <aside\n            className='info-window'\n            tabIndex={0}\n        >\n            <h2 className='info-window-title'>\n                {currentMarker.title}\n            </h2>\n            <article>\n                <img\n                    src={photoContent}\n                    alt={\"Most liked photo from \" + currentMarker.title}\n                />\n                <div className='info-window-address'>\n                    <p>{currentMarker.streetAddress}</p>\n                    <p>{currentMarker.municipalAddress}</p>\n                </div>\n            </article>\n            <p className='source-attribution'>Café Data Provided by FourSquare</p>\n        </aside>\n    );\n}\n\nexport default InfoWindow;","import React, { Component } from 'react';\nimport './App.css';\n\nimport * as coffeeVenues from './coffeeVenues.json';\nimport FilterVenues from './filterVenues';\nimport InfoWindow from './infoWindow';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            venues: coffeeVenues.default,\n            markers: [],\n            currentMarker: {},\n            infoWindowIsOpen: false,\n            photoContent: ''\n        }\n    }\n\n    componentDidMount() {\n        // provide global variable reference for initMap\n        window.initMap = this.initMap;\n        runScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDwaRNU7cl3-C_nhE0Qjd1RQhM6c438OyA&callback=initMap\");\n    }\n    \n    initMap = () => {\n        // Set up custom object-context for access to this scope\n        let bindToThis = this;\n        // Get state variables into scope\n        const { venues, markers } = this.state;\n\n        // Declare map object\n        let map = new window.google.maps.Map(document.getElementById('map'), {\n            center: {lat: 39.946, lng: -75.212},\n            zoom: 15\n        });\n\n        // Create a new marker for each venue in the coffeeVenues.json file\n        for (let i = 0; i < venues.length; i++) {\n            // Define a value for each property\n            let position = venues[i].position;\n            let title = venues[i].title;\n            let streetAddress = venues[i].streetAddress;\n            let municipalAddress = venues[i].municipalAddress;\n            let id = venues[i].key;\n      \n            // Create the marker\n            let marker = new window.google.maps.Marker({\n              map: map,\n              position: position,\n              title: title,\n              streetAddress: streetAddress,\n              municipalAddress: municipalAddress,\n              animation: window.google.maps.Animation.DROP,\n              id: id\n            });\n\n            // Update the markers collection state with new marker\n            markers.push(marker);\n\n            // When a marker is clicked, open the InfoWindow\n            marker.addListener('click', function () {\n                bindToThis.openInfoWindow(marker);\n            });\n        }\n\n        // Listen for clicks on map to close InfoWindow\n        map.addListener('click', function () {\n            bindToThis.closeInfoWindow();\n        });\n    }\n\n    openInfoWindow = (marker) => {\n        // Open InfoWindow and set marker data to pass to InfoWindow component\n        this.setState({\n          infoWindowIsOpen: true,\n          currentMarker: marker\n        });\n\n        this.getVenuePhoto(marker);\n    }\n    \n    closeInfoWindow = () => {\n        // Close InfoWindow and reset currentMarker\n        this.setState({\n            infoWindowIsOpen: false,\n            currentMarker: {}\n        });\n    }\n\n    getVenuePhoto = (marker) => {\n        // Provide custom object-context variable to access this scope\n        let bindToThis = this;\n        let photoUrl = `https://api.foursquare.com/v2/venues/${marker.id}/photos?client_id=AHI421MPXJ5XNDPQT5JCLNMDCHIOQDC5RVGFL2R3BHQ21314&client_secret=T2MGDFJXLGG1SBGJ0PEL5EIQCSENNQ21R3GX54HP2BXNDZ2R&v=20180323`\n\n        // Fetch photos response object from the FourSquare API using Fetch\n        fetch(photoUrl)\n        .then(response => response.json())\n        .then(response => {\n            let photoPrefix = response.response.photos.items[0].prefix;\n            let photoSuffix = response.response.photos.items[0].suffix;\n            let photoSrc = `${photoPrefix}150x150${photoSuffix}`\n            \n            // Add the retrieved photo for this venue into the state\n            bindToThis.setState({\n                photoContent: photoSrc\n            });\n        })\n        // If there's an error with the HTTP request, handle it\n        .catch(error => {\n            let errorReport = 'Failed to parse image data ' + error;\n            bindToThis.setState({\n                photoContent: errorReport\n            });\n        })\n    }\n\n    render() {\n        return (\n            <main className=\"App\">\n                <FilterVenues\n                    venuesList={this.state.venues}\n                    markers={this.state.markers}\n                    openInfoWindow={this.openInfoWindow}\n                />\n\n                {\n                    this.state.infoWindowIsOpen &&\n                    <InfoWindow\n                        currentMarker={this.state.currentMarker}\n                        photoContent={this.state.photoContent}\n                    />\n                }\n            \n                <div id=\"map\" role=\"application\"></div>\n            </main>\n        );\n    }\n}\n\nexport default App;\n\nfunction runScript(src) {\n\tconst body = window.document.querySelector('body');\n\tconst script = window.document.createElement('script');\n    \n    script.src = src;\n\tscript.async = true;\n\tscript.defer = true;\n    body.insertAdjacentElement('beforeend', script);\n    \n    script.onerror = () => (\n        document.write('Failed to load Google Maps')\n    );\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}